In the second homework, we will explore the cost of system calls and
the page fault cost. The homework will consist of three parts: part 1
and part 2 will require you to develop a benchmark to measure the cost
of a system call, whereas the part 3 will involve reducing the
cost of page fault handling by modifying the OS virtual memory
management.

Linux source code: https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/?h=linux-4.17.y

## PART 1
---------
The first step would be to write a simple benchmark to measure the
cost of the system call; you will add a new dummy system call
(hello_kernel) to your OS in the Linux kernel's mm/mmap.c file. Please
see how to add a system call to the OS in the following references.

XX

Once you have added a system call, measure the cost of invoking a system call from 
userspace by invoking the system call 100K times and measuring the average latency. 

NOTE: Make sure that your system call is getting called by adding a
`printk()' with in your dummy system call. You should remove the print
statement after you have confirmed that your new system call works!


## PART 2
---------
In the second part of the homework, you will measure the cost of page fault. 
Remember that the OS allocates pages on-demand -- first time a page
is accessed (touched) after allocation. First, you will allocate a large 2GB memory-mapped 
region which is also page-aligned. Next, you will touch (write) the first byte of each 
page sequentially and measure the avergage cost of accessing a page (i.e., page fault cost).

### Note: For allocating memory-mapped region, you can use `mmap' 
system call that allocates page-aligned memory. When using `mmap()' call, you should 
map an anonymous memory and not a file backed memory. See the following link for 
more details about how to allocate anonymous memory.

## PART 3
---------
In part 3 of the homework, you will attempt to reduce the cost of page
fault. Every time a page fault occurs, you will allocate two pages on
a page fault: one page for the actual faulting address (say, addr X) 
and the next page (say, addr X + 4096). For this, you will modify the OS virtual 
memory handler. 

The page faults for anonymous memory are handled in the "mm/memory.c" file 
in the Linux kernel source code, and specifically, the function 
"do_anounymous_page_fault()" handles the page fault. This function first 
checks whether the access is read or write, and if it is a write operation,
then (1) allocates a page, (2) creates a page table entry (PTE), and (3) 
adds the page fault to the page table.

We will walk through this function in the class.

## Resources
-------------
In this class, we hacking the OS and testing the OS with a QEMU emulator. 
A QEMU is a virtual machine that runs a process either on a baremetal OS 
or even inside another virtual machine. More details about QEMU can be
obtained here.


For students new to QEMU or hacking kernel, we have created a set of 
instructions about how to compile a custom kernel (OS), how to run the 
OS using QEMU. Detailed step-by-step instructions can be found here. 


## Starting Early
-----------------
This a significant-but-essential homework in understanding the basics of 
OS virtual memory, hence you should start working early on this homework.
Please try to make it to the office hours. 

## References

1. https://www.kernel.org/doc/html/v4.14/kernel-hacking/index.html




























